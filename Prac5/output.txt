Enter code (Ctrl+D to finish):
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
stdio -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
stdlib -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
time -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
int -> KEYWORD
main -> IDENTIFIER
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> KEYWORD
guess -> IDENTIFIER
, -> COMMA
number -> IDENTIFIER
, -> COMMA
attempts -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
0 -> INT_LITERAL
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Seed -> IDENTIFIER
random -> IDENTIFIER
number -> IDENTIFIER
generator -> IDENTIFIER
srand -> IDENTIFIER
( -> LPAREN
time -> IDENTIFIER
( -> LPAREN
0 -> INT_LITERAL
) -> RPAREN
) -> RPAREN
; -> SEMICOLON
number -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
rand -> IDENTIFIER
( -> LPAREN
) -> RPAREN
100 -> INT_LITERAL
+ -> ARITHMETIC_OP
1 -> INT_LITERAL
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Random -> IDENTIFIER
number -> IDENTIFIER
between -> IDENTIFIER
1 -> INT_LITERAL
and -> IDENTIFIER
100 -> INT_LITERAL
printf -> IDENTIFIER
( -> LPAREN
"ðŸŽ¯ Guess the number (between 1 and 100):\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
do -> IDENTIFIER
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Enter your guess: " -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
scanf -> IDENTIFIER
( -> LPAREN
"%d" -> STRING_LITERAL
, -> COMMA
& -> ADDRESS_OP
guess -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
attempts -> IDENTIFIER
++ -> ARITHMETIC_OP
; -> SEMICOLON
if -> IDENTIFIER
( -> LPAREN
guess -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
number -> IDENTIFIER
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Too high! Try again.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
} -> RBRACE
else -> IDENTIFIER
if -> IDENTIFIER
( -> LPAREN
guess -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
number -> IDENTIFIER
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Too low! Try again.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
} -> RBRACE
else -> IDENTIFIER
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"ðŸŽ‰ Correct! You guessed it in %d attempt(s).\n" -> STRING_LITERAL
, -> COMMA
attempts -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
} -> RBRACE
} -> RBRACE
while -> IDENTIFIER
( -> LPAREN
guess -> IDENTIFIER
!= -> RELATIONAL_OP
number -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
0 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
