Enter code (Ctrl+D to finish):
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
stdio -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
limits -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
For -> IDENTIFIER
ULLONG_MAX -> IDENTIFIER
int -> KEYWORD
main -> IDENTIFIER
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> KEYWORD
n -> IDENTIFIER
; -> SEMICOLON
unsigned -> IDENTIFIER
long -> IDENTIFIER
long -> IDENTIFIER
factorial -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
1 -> INT_LITERAL
; -> SEMICOLON
printf -> IDENTIFIER
( -> LPAREN
"Enter a positive integer: " -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Validate -> IDENTIFIER
if -> IDENTIFIER
input -> IDENTIFIER
is -> IDENTIFIER
an -> IDENTIFIER
integer -> IDENTIFIER
if -> IDENTIFIER
( -> LPAREN
scanf -> IDENTIFIER
( -> LPAREN
"%d" -> STRING_LITERAL
, -> COMMA
& -> ADDRESS_OP
n -> IDENTIFIER
) -> RPAREN
!= -> RELATIONAL_OP
1 -> INT_LITERAL
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Invalid input. Please enter an integer value.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
1 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Check -> IDENTIFIER
for -> KEYWORD
negative -> IDENTIFIER
input -> IDENTIFIER
if -> IDENTIFIER
( -> LPAREN
n -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
0 -> INT_LITERAL
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Factorial is not defined for negative numbers.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
1 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Check -> IDENTIFIER
for -> KEYWORD
values -> IDENTIFIER
that -> IDENTIFIER
could -> IDENTIFIER
cause -> IDENTIFIER
overflow -> IDENTIFIER
if -> IDENTIFIER
( -> LPAREN
n -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
20 -> INT_LITERAL
) -> RPAREN
{ -> LBRACE
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
21 -> INT_LITERAL
exceeds -> IDENTIFIER
the -> IDENTIFIER
range -> IDENTIFIER
of -> IDENTIFIER
unsigned -> IDENTIFIER
long -> IDENTIFIER
long -> IDENTIFIER
printf -> IDENTIFIER
( -> LPAREN
"Input too large! Please enter a number â‰¤ 20 to avoid overflow.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
1 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Calculate -> IDENTIFIER
factorial -> IDENTIFIER
for -> KEYWORD
( -> LPAREN
int -> KEYWORD
i -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
1 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
<= -> RELATIONAL_OP
n -> IDENTIFIER
; -> SEMICOLON
++ -> ARITHMETIC_OP
i -> IDENTIFIER
) -> RPAREN
{ -> LBRACE
factorial -> IDENTIFIER
* -> ARITHMETIC_OP
= -> ASSIGN/RELATIONAL_OP
i -> IDENTIFIER
; -> SEMICOLON
} -> RBRACE
printf -> IDENTIFIER
( -> LPAREN
"Factorial of %d = %llu\n" -> STRING_LITERAL
, -> COMMA
n -> IDENTIFIER
, -> COMMA
factorial -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
0 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
