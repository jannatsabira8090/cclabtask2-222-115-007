Enter code (Ctrl+D to finish):
include -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
stdio -> IDENTIFIER
h -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
define -> IDENTIFIER
MAX_SIZE -> IDENTIFIER
100 -> INT_LITERAL
int -> KEYWORD
main -> IDENTIFIER
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> KEYWORD
numbers -> IDENTIFIER
MAX_SIZE -> IDENTIFIER
, -> COMMA
count -> IDENTIFIER
; -> SEMICOLON
float -> KEYWORD
sum -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
0 -> INT_LITERAL
, -> COMMA
average -> IDENTIFIER
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Prompt -> IDENTIFIER
for -> KEYWORD
number -> IDENTIFIER
count -> IDENTIFIER
printf -> IDENTIFIER
( -> LPAREN
"How many numbers do you want to enter (1â€“%d)? " -> STRING_LITERAL
, -> COMMA
MAX_SIZE -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
if -> IDENTIFIER
( -> LPAREN
scanf -> IDENTIFIER
( -> LPAREN
"%d" -> STRING_LITERAL
, -> COMMA
& -> ADDRESS_OP
count -> IDENTIFIER
) -> RPAREN
!= -> RELATIONAL_OP
1 -> INT_LITERAL
count -> IDENTIFIER
<= -> RELATIONAL_OP
0 -> INT_LITERAL
count -> IDENTIFIER
> -> ASSIGN/RELATIONAL_OP
MAX_SIZE -> IDENTIFIER
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Invalid input. Please enter a number between 1 and %d.\n" -> STRING_LITERAL
, -> COMMA
MAX_SIZE -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
1 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Input -> IDENTIFIER
loop -> IDENTIFIER
for -> KEYWORD
( -> LPAREN
int -> KEYWORD
i -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
0 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
< -> ASSIGN/RELATIONAL_OP
count -> IDENTIFIER
; -> SEMICOLON
i -> IDENTIFIER
++ -> ARITHMETIC_OP
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Enter number %d: " -> STRING_LITERAL
, -> COMMA
i -> IDENTIFIER
+ -> ARITHMETIC_OP
1 -> INT_LITERAL
) -> RPAREN
; -> SEMICOLON
if -> IDENTIFIER
( -> LPAREN
scanf -> IDENTIFIER
( -> LPAREN
"%d" -> STRING_LITERAL
, -> COMMA
& -> ADDRESS_OP
numbers -> IDENTIFIER
i -> IDENTIFIER
) -> RPAREN
!= -> RELATIONAL_OP
1 -> INT_LITERAL
) -> RPAREN
{ -> LBRACE
printf -> IDENTIFIER
( -> LPAREN
"Invalid input. Please enter an integer.\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Clear -> IDENTIFIER
input -> IDENTIFIER
buffer -> IDENTIFIER
while -> IDENTIFIER
( -> LPAREN
getchar -> IDENTIFIER
( -> LPAREN
) -> RPAREN
!= -> RELATIONAL_OP
'\n' -> CHAR_LITERAL
) -> RPAREN
; -> SEMICOLON
i -> IDENTIFIER
-- -> ARITHMETIC_OP
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
repeat -> IDENTIFIER
this -> IDENTIFIER
iteration -> IDENTIFIER
continue -> IDENTIFIER
; -> SEMICOLON
} -> RBRACE
sum -> IDENTIFIER
+ -> ARITHMETIC_OP
= -> ASSIGN/RELATIONAL_OP
numbers -> IDENTIFIER
i -> IDENTIFIER
; -> SEMICOLON
} -> RBRACE
average -> IDENTIFIER
= -> ASSIGN/RELATIONAL_OP
sum -> IDENTIFIER
/ -> ARITHMETIC_OP
count -> IDENTIFIER
; -> SEMICOLON
/ -> ARITHMETIC_OP
/ -> ARITHMETIC_OP
Display -> IDENTIFIER
results -> IDENTIFIER
printf -> IDENTIFIER
( -> LPAREN
"\nðŸ“Š Results:\n" -> STRING_LITERAL
) -> RPAREN
; -> SEMICOLON
printf -> IDENTIFIER
( -> LPAREN
"Sum = %.2f\n" -> STRING_LITERAL
, -> COMMA
sum -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
printf -> IDENTIFIER
( -> LPAREN
"Average = %.2f\n" -> STRING_LITERAL
, -> COMMA
average -> IDENTIFIER
) -> RPAREN
; -> SEMICOLON
return -> KEYWORD
0 -> INT_LITERAL
; -> SEMICOLON
} -> RBRACE
